<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
"http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">
<article class="whitepaper">

  <title>MMC audit framework</title>

  <subtitle>New feature / Draft</subtitle>

  <articleinfo>
    
    <author>
      <firstname>Cédric</firstname>
      <surname>Delfosse</surname>
      <email>cdelfosse@mandriva.com</email>
    </author>

    <affiliation>
      <orgname>Mandriva</orgname>
    </affiliation>

    <copyright>
      <year>2009 Cédric Delfosse - Mandriva</year>
    </copyright>

    <revhistory>
      <revision>
        <revnumber>$Revision$</revnumber>
        <date>$Date$</date>
        <authorinitials>$Author$</authorinitials>
      </revision>
    </revhistory>

    <abstract>
      <para>This document specifies the MMC audit framework.</para>
    </abstract>

  </articleinfo>

  <section>

    <title>Introduction</title>


    <para>
      An administrator needs to know who did what and when. This feature is highly needed for the MMC, as it manages users and critical network ressources.
    </para>

    <para>
      This document defines the perimeter of the MMC audit system, the data structure and the Python API that will be used to log events.
    </para>

    <para>
      We won't talk in this document about any audit GUI design.
    </para>

  </section>
  
  <section>

    <title>Perimeter</title>

    <para>
      First, what is not the MMC audit framework:
    </para>
    <itemizedlist>
      <listitem>
	<para>
	  a debugging log for developers. Auditing is not logging.
	</para>
      </listitem>
      <listitem>
	<para>
	  a log for all LDAP directory modifications. That's the role of the LDAP directory to provide this kind of data. Moreover, the MMC API also works on non LDAP data, like SAMBA shares for example.
	</para>
      </listitem>
    </itemizedlist>

    <para>
      We will record only "atomic" events. For example, If we have a method that remove a user from all her/his group, we will create a log record for each removed group instead of a single log telling that the user has been removed from all groups. This precision is needed to follow the exact life-cycle of the objects.
    </para>

  </section>

  <section>

    <title>Structure of an audit record</title>

    <para>
      An audit record is made of the following datas:
    </para>
    
    <itemizedlist>
      <listitem>
	<para>
	  timestamp: when does this event occured ?
	</para>
      </listitem>
      <listitem>
	<para>
	  source: which host is performing the action related to the event and reporting the event ? This can be the host name of the MMC agent reporting the event, or the host name where a script using the MMC API is used.
	</para>
      </listitem>
      <listitem>
	<para>
	  initiator: who triggered this event ? This can be the user id of the user connected to the MMC agent, or the effective user id of a script using the MMC API.
	</para>
      </listitem>
      <listitem>
	<para>
	  initiator: which application on which host initiated this event ? The typical cases: the MMC web interface on computer laptop.example.net, the python script "/root/populate_ldap.py" on computer mds.example.net.
	</para>
      </listitem>
      <listitem>
	<para>
	  event: what happened ? To designate an event, we will use a simple label. For example, the "add a user action" from the MMC "base" API is called "BASE_ADD_USER".
	</para>
      </listitem>
      <listitem>
	<para>
	  Action result: was the operation triggering the event succesfull ?
	</para>
      </listitem>
      <listitem>
	<para>
	  target: which were the object affected by the event ? An object could be a user, a group, a user LDAP attribute, etc.
	</para>
      </listitem>
      <listitem>
	<para>
	  What were the previous values of the affected targets, and what are the current values ? For example, if we modified the value of a LDAP attribute, we will save its previous and current value in the audit record.
	</para>
      </listitem>
    </itemizedlist>

  </section>

  <section>

    <title>Audit database schema</title>

    <para>
      We will provide a MySQL and a PostgreSQL database backend, thanks to the Python SQLAlchemy library.
    </para>

    <para>
      Here is the database schema:
    </para>

    <mediaobject><imageobject>
    <imagedata fileref="img/audit-database-schema.png" />
    </imageobject></mediaobject>

    <para>
      Table description:
    </para>
    <itemizedlist>
      <listitem>
	<para>
	  initiator: application (MMC web interface for example), IP address and hostname of the server that initiated the connection;
	</para>
      </listitem>
      <listitem>
	<para>
	  source: hostname of the machine that received the action that triggered the event, and which is reporting the event;
	</para>
      </listitem>
      <listitem>
	<para>
	  module: module name owner of the event. If the event is linked to the MMC "samba" module, the name will be "MMC-SAMBA";
	</para>
      </listitem>
      <listitem>
	<para>
	  event: name of the reported event, for example "SAMBA_LOCK_USER". Each event is linked to its module;
	</para>
      </listitem>
      <listitem>
	<para>
	  type: name of a object type, for example "USER", "GROUP", ...
	</para>
      </listitem>
      <listitem>
	<para>
	  object: name of a object affected by the audit record. Each object has a type. For example, the object representing the user "foo" has the name "foo" and the type "USER".
	</para>
      </listitem>
      <listitem>
	<para>
	  object_log: link a log entry to object entries;
	</para>
      </listitem>
      <listitem>
	<para>
	  previous_value: the previous value (if applicable) of the object before the audit record;
	</para>
      </listitem>
      <listitem>
	<para>
	  current_value: the value (if applicable) of the object after the audit record;
	</para>
      </listitem>
      <listitem>
	<para>
	  parameters: additional event parameters (optional);
	</para>
      </listitem>
      <listitem>
	<para>
	  log: a log is linked to an initiator, a source, an event, one or multiple object_log rows, and zero or multiple parameters. The first object_log row is always linked to the object representing the user that triggered the event. The "result" column is a boolean, which value is false if the operation linked to the event failed.
	</para>
      </listitem>

    </itemizedlist>

    <section>
      
      <title>How do we address object in a log ?</title>

      <para>
	There is a little problem when addressing object in a log. For example, we want to record that the LDAP attribute called "fooattr" from the user "foo" has been deleted. How do we implement that using this database structure ?
      </para>
      <para>
	When storing the log data into the database, we will simply connect the object representing the LDAP attribute "fooattr" to the object representing the user "foo" thanks to the fk_parent field.
      </para>

    </section>

    <section>
      
      <title>How do we know the current execution context ?</title>

      <para>
	All XML-RPC calls received by the MMC agent are executed in threads. Each time a new thread is started, the current user session is attached to the thread. From the session the MMC agent knows which user triggered an event and the initiator (the MMC web interface in most case).
      </para>
      <para>
	When using the MMC API without the MMC agent (no XML-RPC calls), the initiator is the current host and the current application (sys.argv[0]), and the user is the current effective user id number.
      </para>

    </section>
    
  </section>

  <section>

    <title>Python API</title>
    
    <section>

      <title>AuditFactory singleton class</title>

      <para>
	We provide a Singleton class called "AuditFactory" that allows to access the audit framework. It reads the "audit" section of <filename>/etc/mmc/plugins/base.ini</filename> file that defines the database connection.
      </para>
      <para>
	For compatibility, the audit framework can be disabled.
      </para>

    </section>

    <section>

      <title>Logging an event</title>
      
      <para>
	 The AuditFactory class owns this method to log an event:
      </para>

      <screen>
def log(self, module, event, objects = None, current=None, previous=None, parameters = None)
      </screen>

      <itemizedlist>
	<listitem>
	  <para>
	    module: module name owner of the event
	  </para>
	</listitem>
	<listitem>
	  <para>
	    event: event name
	  </para>
	</listitem>
	<listitem>
	  <para>
	    objects: objects affected by the event. the object is represented by a couple (object name, object type). For example, the user "foo" is ("foo", "USER"). If the object is a child of another object, its parent must be prepended in a list. For example, the attribute "fooattr" of the user "foo" is [("foo", "USER"), ("fooattr", "ATTRIBUTE")]
	  </para>
	</listitem>
	<listitem>
	  <para>
	    previous: previous value of the object affected by the event;
	  </para>
	</listitem>
	<listitem>
	  <para>
	    current: current value of the object affected by the event;
	  </para>
	</listitem>
	<listitem>
	  <para>
	    parameters: parameters used when performing the action that triggered the event;
	  </para>
	</listitem>
      </itemizedlist>

      <para>
	This method creates all needed rows into the audit database. It should be called just before an action is performed. It sets the log database result field to False to define that the action has not been performed or has failed.
      </para>
      <para>
	This method returns an AuditRecord object, that has only one method called "commit", that should be use when the action is done:
      </para>

    </section>
      
    <section>

      <title>Example</title>

      <screen>
from mmc.core.audit import AuditFactory

# Record to the audit database the action being performed
r = AuditFactory().log("MODULE_TEST", "TEST_AUDIT")
# Do domething
...
# Flag the action has successfull
r.commit()
      </screen>

    </section>

    <section>

      <title>Declaring module events and type</title>

      <para>
	Each MMC API module have a <filename>audit.py</filename> Python file that defines all events and types managed by the module.
      </para>
      <para>
	Here is an extract of what contains the <filename>audit.py</filename> file for the "base" MMC module:
      </para>
      <screen>
class AuditActions:
    BASE_ADD_USER = u'BASE_ADD_USER'
    BASE_ENABLE_USER = u'BASE_ENABLE_USER'
    ...
AA = AuditActions

class AuditTypes:
    USER = u'USER'
    GROUP = u'GROUP'
    ...
AT = AuditTypes

PLUGIN_NAME = u'MMC-BASE'
      </screen>

      <para>
	Remarks:
      </para>
      <itemizedlist>
	<listitem>
	  <para>
	    All the strings must be unicode strings, in uppercase.
	  </para>
	</listitem>
	<listitem>
	  <para>
	    Actions (events) name starts with the name of the plugin
	  </para>
	</listitem>
      </itemizedlist>
      <para>
      </para>
    </section>
    
  </section>
  
  <section>

    <title>Open questions</title>

    <para>
      The user that initiates an event can either be a LDAP user (a user connected to the MMC web interface for example), or a system user (a user logged in a Linux system that runs a script using the MMC API). Should the type of these users be different ?
    </para>

  </section>

</article>
